#!/usr/bin/env python3

import argparse
import json
import sys


#------------------------------------------------------------------------------
#   Constants
#------------------------------------------------------------------------------
MAN_PROG_NAME = "dcmp-fmt"
MAN_DESCRIPTION = """
Format and display the outputs of docker compose ps.

> docker compose ps --format json | dcmp-fmt
"""

DEFAULT_DISPLAY_KEYS = [
    "Name", "State", "Status", "Command",
]

DEFAULT_COMMAND_TRUNCATE_LENGTH = 10


#------------------------------------------------------------------------------
#   Print Helpers
#
#   pc ... print column
#------------------------------------------------------------------------------
def pc_r(value, digit, tail = "  "):
    print(f"{value:>{digit}}{tail}", end = "")
    return digit + len(tail)

def pc_l(value, digit, tail = "  "):
    print(f"{value:<{digit}}{tail}", end = "")
    return digit + len(tail)

def pc_c(value, digit, tail = "  "):
    print(f"{value:^{digit}}{tail}", end = "")
    return digit + len(tail)


def print_column(key, value, mlen, is_header = False):
    digit = mlen

    # Header
    if is_header:
        if key in ['Command']:
            digit = DEFAULT_COMMAND_TRUNCATE_LENGTH
        return pc_c(value, digit)

    # Records
    if key in ['Command']:
        v = value[:DEFAULT_COMMAND_TRUNCATE_LENGTH]
        return pc_l(v, len(v), "... ")
    if key in ['Image', 'Status', 'Service']:
        return pc_l(value, digit)
    if key in ['Name']:
        return pc_r(value, digit)
    else:
        return pc_c(value, digit)



#------------------------------------------------------------------------------
#   dcmp-fmt
#------------------------------------------------------------------------------
def calc_maxlen(data):
    maxlen = {}
    for row in data:
        for key in row.keys():
            n = 0

            t = type(row[key])
            if t is str:
                n = len(row[key])
            elif t is int:
                n = len(str(row[key]))
            else:
                n = len(str(row[key])) # TODO

            if key in maxlen:
                maxlen[key] = max(maxlen[key], n)
            else:
                maxlen[key] = n
    return maxlen


def main(args):
    keys = DEFAULT_DISPLAY_KEYS
    if args.keys:
        keys = args.keys.split(',')

    # Load ps data from stdin
    ps_json = json.loads(input())
    if type(ps_json) is not list:
        ps_json = [ps_json]
    maxlen = calc_maxlen(ps_json)

    # Header
    hlen = 0
    for key in keys:
        if key not in maxlen:
            continue
        hlen += print_column(key, key, maxlen[key], True)
    print()
    print("-" * hlen)

    # Rows
    for row in ps_json:
        for key in keys:
            if key not in maxlen:
                continue
            print_column(key, row[key], maxlen[key])
        print()


#------------------------------------------------------------------------------
#   Command Line
#------------------------------------------------------------------------------
def parse_args():
    p = argparse.ArgumentParser(
        prog = MAN_PROG_NAME,
        formatter_class = argparse.RawDescriptionHelpFormatter,
        description = MAN_DESCRIPTION,
    )
    p.add_argument("--keys",
            type = str,
            help = "Key to display. Specified as comma-separated without spaces.")
    return p.parse_args()


# Entrypoint
if __name__ == "__main__":
    main(parse_args())


